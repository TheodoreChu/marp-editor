{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","components/Icons.tsx","index.tsx"],"names":["ComponentDataKey","HtmlElementId","HtmlClassName","ModeType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PrintIcon","fill","role","aria-label","width","height","viewBox","xmlns","d","MouseEvent","modes","type","Edit","label","css","Split","View","debugMode","initialState","mode","printUrl","text","keyMap","Map","MarpEditor","props","editorKit","saveTimer","marp","Marp","html","emoji","shortcode","unicode","math","lib","katexFontPath","minifyCSS","script","markdown","breaks","componentDidMount","configureEditorKit","configureResizer","delegate","EditorKitDelegate","setEditorRawText","setState","renderSlides","loadSavedMode","clearUndoHistory","getElementsBySelector","EditorKit","supportsFilesafe","saveNote","onEditorValueChanged","error","console","log","handleInputChange","event","value","target","saveText","state","clearTimeout","debounce","setTimeout","render","view","document","getElementById","scrollY","scrollTop","innerHTML","MarpStyles","MarpContent","savedMode","internal","componentManager","componentDataValueForKey","Mode","setModeFromModeType","platform","e","logDebugMessage","changeMode","setComponentDataValueForKey","removeSelection","selection","window","getSelection","removeAllRanges","editor","Editor","columnResizer","ColumnResizer","pressed","resizerWidth","offsetWidth","addEventListener","Down","classList","add","Dragging","NoSelection","Move","x","clientX","colLeft","style","left","Up","remove","onBlur","clear","onFocus","onKeyDown","set","key","get","preventDefault","onKeyUp","delete","message","object","print","this","className","SnComponent","id","tabIndex","Header","map","onClick","title","PrintButton","EditorContainer","autoCapitalize","autoComplete","dir","onChange","placeholder","spellCheck","React","Component","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.46c1d67b.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport Marp from '@marp-team/marp-core';\nimport { debounce } from 'lodash';\nimport { PrintIcon } from './Icons';\n/** This is important */\nimport '@marp-team/marp-core/lib/browser';\n\n/** I am not sure if this is important */\nimport '@marp-team/marp-core/browser';\nimport '@marp-team/marp-core/lib/browser.cjs';\nimport '@marp-team/marp-core/lib/marp';\n\nenum ComponentDataKey {\n  Mode = 'mode',\n}\n\nexport enum HtmlElementId {\n  ColumnResizer = 'column-resizer',\n  Editor = 'editor',\n  EditorContainer = 'editor-container',\n  Header = 'header',\n  MarpContent = 'marp-content',\n  MarpEditor = 'marp-editor',\n  MarpStyles = 'marp-styles',\n  View = 'view',\n  PrintButton = 'print-button',\n}\n\nexport enum HtmlClassName {\n  Dragging = 'dragging',\n  NoSelection = 'no-selection',\n  SnComponent = 'sn-component',\n  Textarea = 'sk-input textarea',\n}\n\ntype Mode = {\n  type: ModeType;\n  label: string;\n  css: string;\n};\n\nenum ModeType {\n  Edit = 0,\n  Split = 1,\n  View = 2,\n}\n\nconst modes = [\n  { type: ModeType.Edit, label: 'Edit', css: 'edit' } as Mode,\n  { type: ModeType.Split, label: 'Split', css: 'split' } as Mode,\n  { type: ModeType.View, label: 'View', css: 'view' } as Mode,\n];\n\nenum MouseEvent {\n  Down = 'mousedown',\n  Move = 'mousemove',\n  Up = 'mouseup',\n}\n\nexport interface EditorInterface {\n  text: string;\n  mode: Mode;\n  platform?: string;\n  printUrl: boolean;\n}\nconst debugMode = false;\n\nconst initialState = {\n  mode: modes[1],\n  printUrl: false,\n  text: '',\n};\n\nconst keyMap = new Map();\n\nexport default class MarpEditor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n  saveTimer: NodeJS.Timeout | undefined;\n  marp = new Marp({\n    // marp-core constructor options\n    html: true,\n    emoji: {\n      shortcode: true,\n      unicode: false,\n    },\n    math: {\n      lib: 'katex',\n      katexFontPath: 'katex/v0.12.0/fonts/',\n    },\n    minifyCSS: false,\n    script: true,\n\n    // We can included Marpit constructor options\n    // https://marpit-api.marp.app/marpit\n    markdown: {\n      breaks: true, // Create a <br/> on new line\n    },\n  });\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount = () => {\n    this.configureEditorKit();\n    this.configureResizer();\n  };\n\n  configureEditorKit = () => {\n    const delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        this.setState(\n          {\n            text,\n          },\n          () => {\n            this.renderSlides();\n            this.loadSavedMode();\n          }\n        );\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but may break the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.log('Error saving note:', error);\n    }\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = event.target;\n    const value = target.value;\n    this.saveText(value);\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState(\n      {\n        text: text,\n      },\n      () => {\n        // Do not re-render slides in edit-only mode\n        if (this.state.mode !== modes[0]) {\n          if (this.saveTimer) {\n            clearTimeout(this.saveTimer);\n          }\n          debounce(() => {\n            this.renderSlides();\n          }, 300);\n          this.saveTimer = setTimeout(() => {\n            this.renderSlides();\n          }, 350);\n        }\n      }\n    );\n  };\n\n  renderSlides = () => {\n    // Convert Markdown slide deck into HTML and CSS\n    const { html, css } = this.marp.render(this.state.text);\n\n    const view = document.getElementById(HtmlElementId.View);\n    if (view) {\n      /** This keeps the vertical scroll when rendering the slides */\n      let scrollY = view.scrollTop;\n      view.innerHTML = html;\n      view.scrollTop = scrollY;\n    }\n    const MarpStyles = document.getElementById(HtmlElementId.MarpStyles);\n    if (MarpStyles) {\n      MarpStyles.innerHTML = css;\n    }\n    const MarpContent = document.getElementById(HtmlElementId.MarpContent);\n    if (MarpContent) {\n      MarpContent.innerHTML = html;\n    }\n  };\n\n  loadSavedMode = () => {\n    try {\n      const savedMode = this.editorKit.internal.componentManager.componentDataValueForKey(\n        ComponentDataKey.Mode\n      ) as ModeType;\n      if (debugMode) {\n        console.log('loaded savedMode: ' + savedMode);\n      }\n      // We can't use if(savedMode) because it would return false for 0\n      if (typeof savedMode === 'number') {\n        this.setModeFromModeType(savedMode);\n      }\n      this.setState(\n        {\n          platform: this.editorKit.internal.componentManager.platform,\n        },\n        () => {\n          if (debugMode) {\n            console.log(this.state.platform);\n          }\n        }\n      );\n    } catch (e) {\n      if (debugMode) {\n        console.log('Error when loading saved mode: ' + e);\n      }\n    }\n  };\n\n  setModeFromModeType = (value: ModeType) => {\n    for (const mode of modes) {\n      if (mode.type === value) {\n        this.logDebugMessage('setModeFromModeType mode: ', mode.type);\n        this.setState(\n          {\n            mode,\n          },\n          () => {\n            this.renderSlides();\n          }\n        );\n        return;\n      }\n    }\n  };\n\n  changeMode = (mode: Mode) => {\n    this.setState(\n      {\n        mode,\n      },\n      () => {\n        this.renderSlides();\n      }\n    );\n    this.logDebugMessage('changeMode mode: ', mode.type);\n    try {\n      this.editorKit.internal.componentManager.setComponentDataValueForKey(\n        ComponentDataKey.Mode,\n        mode.type\n      );\n    } catch (e) {\n      if (debugMode) {\n        console.log('Error saving mode: ' + e);\n      }\n    }\n  };\n\n  removeSelection = () => {\n    let selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  };\n\n  configureResizer = () => {\n    const MarpEditor = document.getElementById(HtmlElementId.MarpEditor);\n    const editor = document.getElementById(HtmlElementId.Editor);\n    const columnResizer = document.getElementById(HtmlElementId.ColumnResizer);\n    let pressed = false;\n    let safetyOffset = 15;\n    let resizerWidth = 0;\n    if (columnResizer) {\n      resizerWidth = columnResizer.offsetWidth;\n    }\n\n    if (editor && columnResizer) {\n      columnResizer.addEventListener(MouseEvent.Down, (event) => {\n        pressed = true;\n        columnResizer.classList.add(HtmlClassName.Dragging);\n        editor.classList.add(HtmlClassName.NoSelection);\n      });\n    }\n\n    document.addEventListener(MouseEvent.Move, (event) => {\n      if (!pressed) {\n        return;\n      }\n      let x = event.clientX;\n      if (MarpEditor) {\n        if (x < resizerWidth / 2 + safetyOffset) {\n          x = resizerWidth / 2 + safetyOffset;\n        } else if (x > MarpEditor.offsetWidth - resizerWidth - safetyOffset) {\n          x = MarpEditor.offsetWidth - resizerWidth - safetyOffset;\n        }\n      }\n\n      const colLeft = x - resizerWidth / 2;\n      if (columnResizer) {\n        columnResizer.style.left = colLeft + 'px';\n      }\n      if (editor) {\n        editor.style.width = colLeft - safetyOffset + 'px';\n      }\n\n      this.removeSelection();\n    });\n\n    document.addEventListener(MouseEvent.Up, (event) => {\n      if (pressed) {\n        pressed = false;\n        if (columnResizer) {\n          columnResizer.classList.remove(HtmlClassName.Dragging);\n        }\n        if (editor) {\n          editor.classList.remove(HtmlClassName.NoSelection);\n        }\n      }\n    });\n  };\n\n  onBlur = (e: React.FocusEvent) => {\n    keyMap.clear();\n  };\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Do nothing if 'Control' and 's' are pressed\n    if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  logDebugMessage = (message: string, object: any) => {\n    if (debugMode) {\n      console.log(message, object);\n    }\n  };\n\n  print = () => {\n    this.renderSlides();\n    const MarpContent = document.getElementById(HtmlElementId.MarpContent);\n    if (MarpContent) {\n      MarpContent.style['display'] = 'block';\n    }\n    setTimeout(() => {\n      window.print();\n      if (MarpContent) {\n        MarpContent.style['display'] = 'none';\n      }\n    }, 250);\n  };\n\n  render() {\n    const { text } = this.state;\n    return [\n      <div\n        className={\n          HtmlClassName.SnComponent +\n          ' ' +\n          this.state.platform +\n          (this.state.printUrl ? ' print-url' : '')\n        }\n        id={HtmlElementId.MarpEditor}\n        tabIndex={0}\n      >\n        <div id={HtmlElementId.Header}>\n          <div className=\"segmented-buttons-container sk-segmented-buttons\">\n            <div className=\"buttons\">\n              {modes.map((mode) => (\n                <button\n                  onClick={() => this.changeMode(mode)}\n                  className={\n                    'sk-button button ' +\n                    (this.state.mode === mode\n                      ? 'selected info'\n                      : 'sk-secondary-contrast')\n                  }\n                  title={'Turn on ' + mode.label + ' Mode'}\n                >\n                  <div className=\"label\">{mode.label}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n          <button\n            className={'sk-button button sk-secondary-contrast icon-button'}\n            id={HtmlElementId.PrintButton}\n            onClick={() => this.print()}\n            title={'Print rendered slides'}\n          >\n            <span>&nbsp;</span>\n            <PrintIcon role=\"button\" />\n            <span>&nbsp;</span>\n          </button>\n        </div>\n        <main\n          id={HtmlElementId.EditorContainer}\n          className={this.state.mode.css}\n        >\n          <textarea\n            autoCapitalize=\"true\"\n            autoComplete=\"true\"\n            className={this.state.mode.css}\n            dir=\"auto\"\n            id={HtmlElementId.Editor}\n            onBlur={this.onBlur}\n            onChange={this.handleInputChange}\n            onFocus={this.onFocus}\n            onKeyDown={this.onKeyDown}\n            onKeyUp={this.onKeyUp}\n            placeholder=\"\"\n            spellCheck=\"true\"\n            value={text}\n          />\n          <div\n            className={this.state.mode.css}\n            id={HtmlElementId.ColumnResizer}\n          ></div>\n          <style id={HtmlElementId.MarpStyles}></style>\n          <section\n            className={this.state.mode.css}\n            id={HtmlElementId.View}\n            tabIndex={0}\n          ></section>\n        </main>\n      </div>,\n      <div id={HtmlElementId.MarpContent}></div>,\n    ];\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst infoColor = 'var(--sn-stylekit-info-color)';\nconst foregroundColor = 'var(--sn-stylekit-foreground-color)';\n\ninterface Icons {\n  condition?: boolean;\n  fill?: string;\n  role: string;\n}\n\nexport const PrintIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"print icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M15.0001 2.5H5.00008V5.83333H15.0001V2.5ZM15.8334 10C15.6124 10 15.4004 9.9122 15.2442 9.75592C15.0879 9.59964 15.0001 9.38768 15.0001 9.16667C15.0001 8.94565 15.0879 8.73369 15.2442 8.57741C15.4004 8.42113 15.6124 8.33333 15.8334 8.33333C16.0544 8.33333 16.2664 8.42113 16.4227 8.57741C16.579 8.73369 16.6668 8.94565 16.6668 9.16667C16.6668 9.38768 16.579 9.59964 16.4227 9.75592C16.2664 9.9122 16.0544 10 15.8334 10ZM13.3334 15.8333H6.66675V11.6667H13.3334V15.8333ZM15.8334 6.66667H4.16675C3.50371 6.66667 2.86782 6.93006 2.39898 7.3989C1.93014 7.86774 1.66675 8.50363 1.66675 9.16667V14.1667H5.00008V17.5H15.0001V14.1667H18.3334V9.16667C18.3334 8.50363 18.07 7.86774 17.6012 7.3989C17.1323 6.93006 16.4965 6.66667 15.8334 6.66667Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}